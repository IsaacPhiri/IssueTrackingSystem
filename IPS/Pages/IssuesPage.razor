@page "/issues"
@inject HttpClient httpClient
@inject IJSRuntime javaScript
<h3>Issues</h3>
<EditForm Model="@issue" OnValidSubmit="Save">
    <DataAnnotationsValidator/>
    <div class="row pa-4">  
        <div style="max-width:45vw; margin-bottom:20px;" class="col-md-6 col-sm-12">
            <label for="nameInput3">Equipment</label>
            <InputSelect placeholder="select equipment" id="nameInput3" class="form-control"  @bind-Value="@issue.EquipmentId">
               <option value="0">No value selected</option>
                @foreach (var record in equipments)
                {
                  <option value="@record.Id">@record.Name</option>
                }
            </InputSelect>
        </div>  
        <div style="max-width:45vw; margin-bottom:20px;" class="col-md-6 col-sm-12">
            <label for="nameInput4">Inspector</label>
            <InputSelect placeholder="select inpspector" id="nameInput4" class="form-control"  @bind-Value="@issue.InspectorId">
                <option value="0">No value selected</option>
                @foreach (var record in inspectors)
                {
                   <option value="@record.Id">@record.FullName</option>
                }
            </InputSelect>
        </div>   
        <div style="max-width:45vw; margin-bottom:20px;" class="col-md-6 col-sm-12">
            <label for="nameInput5">Description</label>
            <InputText @bind-Value="@issue.Description" class="form-control" id="nameInput5"/>
        </div>         
        <div class="col-sm-12">
           <button type="submit"  class="btn btn-success"><i class="oi oi-file"></i>Save</button>
        </div>
    </div>
</EditForm>
<hr/>
<table class="table table-striped table-hover mt-6">
    <thead>
        <tr>
            <th>Id</th>
            <th>Equipment</th>
            <th>Inspector</th>
            <th>Desciption</th>
            <th>Date</th>
            <th>Status</th>
            <th>Date closed</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var record in tableData)
        {
                       <tr>
                           <td>@record.Id</td>
                           <td>@record.Equipment.Name</td>
                           <td>@record.Inspector.FirstName @record.Inspector.LastName</td>
                           <td>@record.Description</td>
                           <td>@record.Date.ToString("dd MMM, H:mm")</td>
                           <td>@record.Status.ToString()</td>
                           <td>@record.ClosedDate?.ToString("dd MMM, H:mm")</td>                      
                           <td>
                          @if (record.Status == Domain.IssueStatus.Open)
                           {
                                <button @onclick="()=>CloseIssue(record.Id)" class="btn btn-primary btn-sm">Close</button>
                           }
                                <button @onclick="()=>Edit(record)" class="btn btn-warning"><i class="oi oi-pencil"></i>Edit</button>
                               <button @onclick="()=>Delete(record.Id)" class="btn btn-danger"><i class="oi oi-trash"></i>Delete</button>
                           </td>
                       </tr>
        }
    </tbody>
</table>
@code {
    List<Equipment> equipments = new();
    List<Issue> tableData = new();
    List<Inspector> inspectors = new();
    Issue issue = new();
    async Task Save()
    {

        if (issue.Id == 0)
        {
            issue.Date = DateTime.Now;
            var response = await httpClient.PostAsJsonAsync("issue", issue);
            if (response.IsSuccessStatusCode)
            {

                await LoadData();
            }
            else
            {
                await javaScript.InvokeVoidAsync("alert", "An error occurred while trying to save!");
            }
        }
        else
        {
            var response = await httpClient.PutAsJsonAsync($"issue/{issue.Id}", issue);
            if (response.IsSuccessStatusCode)
            {
                await LoadData();
            }
            else
            {
                await javaScript.InvokeVoidAsync("alert", "An error occurred while trying to save!");
            }
        }
    }
    async Task CloseIssue(int id)
    {
        var response = await httpClient.GetAsync($"issue/close/{id}");
        if(response.IsSuccessStatusCode)
        {
            await LoadData();
        }
    }
    void Edit(Issue record)
    {
        issue = record;
    }
   async void Delete(int id)
    {
        var confirm = await javaScript.InvokeAsync<bool>("confirm", "Are you sure you want to delete this record?");
        if (!confirm)
        {
            return;
        }
        var response = await httpClient.DeleteAsync($"issue/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadData();
        }
        else
        {
            await javaScript.InvokeVoidAsync("alert", "An error occurred while trying to delete this issue");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    async Task LoadData()
    {
        var response = await httpClient.GetAsync("issue");
        var response2 = await httpClient.GetAsync("inspector");
        var response1 = await httpClient.GetAsync("equipment");
        if (response.IsSuccessStatusCode)
        {
            tableData = await response.Content.ReadFromJsonAsync<List<Issue>>();

        }
        if (response2.IsSuccessStatusCode)
        {
            inspectors = await response2.Content.ReadFromJsonAsync<List<Inspector>>();

        }
        if (response1.IsSuccessStatusCode)
        {
            equipments = await response1.Content.ReadFromJsonAsync<List<Equipment>>();

        }
        StateHasChanged();
    }
}
